import{_ as e,v as o,b as i,R as d}from"./chunks/framework.ac6683e9.js";const a="/myblog/assets/box-sizing.e2dad9f8.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/index.md","filePath":"CSS/index.md"}'),t={name:"CSS/index.md"},c=d('<h2 id="说一下盒模型" tabindex="-1">说一下盒模型？ <a class="header-anchor" href="#说一下盒模型" aria-label="Permalink to &quot;说一下盒模型？&quot;">​</a></h2><p><img src="'+a+'" alt="盒模型"></p><h2 id="说一下-box-sizing" tabindex="-1">说一下 box-sizing？ <a class="header-anchor" href="#说一下-box-sizing" aria-label="Permalink to &quot;说一下 box-sizing？&quot;">​</a></h2><p><code>box-sizing</code> 主要分为 <code>border-box</code> 和 <code>content-box</code></p><p>拿 width 举例：</p><p><code>content-box： width = content + padding + border</code></p><p><code>border-box： width = content</code></p><p>为了方便样式计算，一般采用 <code>border-box</code></p><h2 id="如何理解外边距塌陷" tabindex="-1">如何理解外边距塌陷？ <a class="header-anchor" href="#如何理解外边距塌陷" aria-label="Permalink to &quot;如何理解外边距塌陷？&quot;">​</a></h2><p>外边距塌陷也被称为外边距合并。</p><p>是指两个在正常流中相邻的<strong>上下块级元素</strong>的边距塌陷，垂直距离取两个值中的较大者。</p><h2 id="子元素有高度-父元素高度为0-有哪些情况" tabindex="-1">子元素有高度，父元素高度为0，有哪些情况？ <a class="header-anchor" href="#子元素有高度-父元素高度为0-有哪些情况" aria-label="Permalink to &quot;子元素有高度，父元素高度为0，有哪些情况？&quot;">​</a></h2><p>首先，这种情况被称为<strong>高度坍塌</strong>。</p><ol><li><p>父元素 <code>position: absolute</code> 绝对定位，脱离文档流</p></li><li><p>父元素 <code>float</code> 设置了浮动，脱离文档流</p></li></ol><h2 id="如何清除浮动" tabindex="-1">如何清除浮动？ <a class="header-anchor" href="#如何清除浮动" aria-label="Permalink to &quot;如何清除浮动？&quot;">​</a></h2><ol><li><p>父元素设置 <code>overflow: hidden;</code></p></li><li><p>在父元素中添加一个空元素，设置 <code>clear:both</code></p></li><li><p>给父元素的伪元素添加 <code>clear:both</code></p></li></ol><h2 id="伪元素和伪类的区别" tabindex="-1">伪元素和伪类的区别？ <a class="header-anchor" href="#伪元素和伪类的区别" aria-label="Permalink to &quot;伪元素和伪类的区别？&quot;">​</a></h2><p>首先，先不要纠结于伪，先搞懂，什么是类，什么是元素。</p><ul><li>伪类</li></ul><p>类不就是 <code>class=&#39;title&#39;</code> ，所以，它就是添加所谓的效果的。</p><p>常用的伪类有： <code>:active</code> , <code>:focus</code> , <code>:hover</code> , <code>:link</code> , <code>:visited</code> , <code>:visited</code> 等。</p><ul><li>伪元素</li></ul><p>元素不就是类似于 <code>&lt;div&gt;&lt;/div&gt;</code> 这种，在文档中有实际的占用空间的，能用来创建一些原有 DOM 结构不存在的元素。</p><p>常用的伪元素有： <code>::before</code> , <code>::after</code> , <code>::first-letter</code> , <code>::first-line</code> 等。</p><p>一般伪元素用 <code>::</code> 双冒号，伪类用 <code>:</code> 单冒号</p><h2 id="link和-import的区别" tabindex="-1">link和@import的区别？ <a class="header-anchor" href="#link和-import的区别" aria-label="Permalink to &quot;link和@import的区别？&quot;">​</a></h2><h2 id="display-none与visibility-hidden的区别" tabindex="-1">display:none与visibility:hidden的区别 <a class="header-anchor" href="#display-none与visibility-hidden的区别" aria-label="Permalink to &quot;display:none与visibility:hidden的区别&quot;">​</a></h2><h2 id="z-index属性在什么情况下会失效" tabindex="-1">z-index属性在什么情况下会失效 <a class="header-anchor" href="#z-index属性在什么情况下会失效" aria-label="Permalink to &quot;z-index属性在什么情况下会失效&quot;">​</a></h2>',28),n=[c];function l(r,s,h,p,b,x){return o(),i("div",null,n)}const m=e(t,[["render",l]]);export{f as __pageData,m as default};
